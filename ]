#![windows_subsystem = "windows"]

mod app;
mod loader;
mod packer;
mod utils;
use app::*;
use clap::{App, Arg};
use utils::OUTPUT_NAME;

fn run_gui() {
    let icon = eframe::epi::IconData {
        rgba: image::load_from_memory(include_bytes!("../icon/128x128@2x.png"))
            .unwrap()
            .to_rgba8()
            .to_vec(),
        width: 256,
        height: 256,
    };

    let start_state = P3App::default();
    let options = eframe::NativeOptions {
        always_on_top: false,
        decorated: true,
        resizable: true,
        maximized: false,
        drag_and_drop_support: true,
        transparent: true,
        icon_data: Some(icon),
        ..Default::default()
    };
    eframe::run_native(Box::new(start_state), options);
}

fn main() {
    let matches = App::new(OUTPUT_NAME)
        .version(env!("CARGO_PKG_VERSION"))
        .author("by Roman Chumak")
        .about(env!("CARGO_PKG_DESCRIPTION"))
        .arg(
            Arg::with_name("input")
                .short("i")
                .long("input")
                .value_name("INPUT_DIR")
                .help("Sets directory to get images from.")
                .takes_value(true),
        )
        .arg(
            Arg::with_name("output")
                .short("o")
                .long("output")
                .value_name("OUTPUT_DIR")
                .help("Sets directory to put the result. Default is Pictures folder.")
                .takes_value(true),
        )
        .arg(
            Arg::with_name("aspect")
                .short("a")
                .long("aspect")
                .value_name("ASPECT")
                .help("Sets aspect ratio of package. Default is 1:1.")
                .takes_value(true),
        )
        .arg(
            Arg::with_name("equal")
                .short("e")
                .long("equal")
                .value_name("EQUAL")
                .help("Scale images to equal size.")
                .takes_value(false),
        )
        .arg(
            Arg::with_name("size")
                .short("s")
                .long("size")
                .value_name("SIZE")
                .help("Sets maximum dimension of exported image. Default is Actual.")
                .takes_value(true),
        )
        .arg(
            Arg::with_name("zip")
                .short("z")
                .long("zip")
                .value_name("ZIP")
                .help("Also pack all given images to ZIP archive.")
                .takes_value(false),
        )
        .get_matches();

    println!("{:?}", matches.value_of("input"));
    match matches.value_of("input") {
        Some(dir) => {
            println!("{:?}", dir);
        }
        None => {
            run_gui();
        }
    }
}
